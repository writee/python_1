import os
from selenium.webdriver import Chrome, ChromeOptions
import time
import pandas as pd

# Chromeを起動する関数


def set_driver(driver_path, headless_flg):
    # Chromeドライバーの読み込み
    options = ChromeOptions()

    # ヘッドレスモード（画面非表示モード）をの設定
    if headless_flg == True:
        options.add_argument('--headless')

    # 起動オプションの設定
    options.add_argument(
        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36')
    # options.add_argument('log-level=3')
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--ignore-ssl-errors')
    options.add_argument('--incognito')          # シークレットモードの設定を付与

    # ChromeのWebDriverオブジェクトを作成する。
    return Chrome(executable_path=os.getcwd() + "/" + driver_path, options=options)

# main処理


def main():
    
    # driverを起動
    if os.name == 'nt': #Windows
        driver = set_driver("chromedriver.exe", False)
    elif os.name == 'posix': #Mac
        driver = set_driver("chromedriver", False)
    # Webサイトを開く
    driver.get("https://tenshoku.mynavi.jp/")
    time.sleep(5)
 
    try:
        # ポップアップを閉じる
        driver.execute_script('document.querySelector(".karte-close").click()')
        time.sleep(5)
        # ポップアップを閉じる
        driver.execute_script('document.querySelector(".karte-close").click()')
    except:
        pass
    
    # 検索窓に入力
    driver.find_element_by_class_name(
        "topSearch__text").send_keys(input('検索条件を指定:'))
    # 検索ボタンクリック
    driver.find_element_by_class_name("topSearch__button").click()

    # ページ終了まで繰り返し取得
    exp_name_list = []
    # 検索結果の一番上の会社名を取得
    name_list = driver.find_elements_by_class_name("cassetteRecruit__name")

    # 検索結果から初年度年収を取得
    exp_money_list = []
    money_list = driver.find_elements_by_class_name("tableCondition__body")

    for name,money in zip(name_list,money_list):
        exp_name_list.append(name.text)
        exp_money_list.append(money.text)

        #CSVファイルに出力
        df1 = pd.DataFrame([exp_name_list,exp_money_list])
        df1.to_csv(r'C:\Users\Taisei\Documents\Program~\kadai02\kadai02.csv',header = False,index=False)

    #次のページボタンをクリック
    driver.find_element_by_xpath('/html/body/div[1]/div[3]/form/div/nav[1]/ul/li[2]/a').click()
    #同じく2ページ目の情報を取得

    # ページ終了まで繰り返し取得
    s_exp_name_list = []
    # 検索結果の一番上の会社名を取得
    s_name_list = driver.find_elements_by_class_name("cassetteRecruit__name")

    # 検索結果から初年度年収を取得
    s_exp_money_list = []
    s_money_list = driver.find_elements_by_class_name("tableCondition__body")

    # 1ページ分繰り返し
    
    
    
    for s_name,s_money in zip(s_name_list,s_money_list):
        s_exp_name_list.append(s_name.text)
        s_exp_money_list.append(s_money.text)        

        #CSVファイル出力
        df2=pd.DataFrame([s_exp_name_list,s_exp_money_list])
        df2.to_csv(r'C:\Users\Taisei\Documents\Program~\kadai02\kadai02.csv',mode = 'a',header = False,index =False)

    print(len(name_list)+len(s_name_list))



        


# 直接起動された場合はmain()を起動(モジュールとして呼び出された場合は起動しないようにするため)
if __name__ == "__main__":
    main()

